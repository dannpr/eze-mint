// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: xuJ96AwQwiTrZC9DsK4jCu
// Component: jgagNCXIi4
import * as React from "react";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: Uc6NxlbWQx2/component
import Button from "../../Button"; // plasmic-import: 3iv-r6L82e0/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_nft_eaze_mint.module.css"; // plasmic-import: xuJ96AwQwiTrZC9DsK4jCu/projectcss
import sty from "./PlasmicNfTmint.module.css"; // plasmic-import: jgagNCXIi4/css

export const PlasmicNfTmint__VariantProps = new Array();

export const PlasmicNfTmint__ArgProps = new Array();

function PlasmicNfTmint__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root2"}
      data-plasmic-override={overrides.root2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root2
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__usxSs
        )}
      >
        {"Mint NFT"}
      </div>

      <TextInput
        data-plasmic-name={"nftData"}
        data-plasmic-override={overrides.nftData}
        className={classNames("__wab_instance", sty.nftData)}
        placeholder={"enter the image"}
        type={"file"}
      />

      <TextInput
        data-plasmic-name={"addressInput"}
        data-plasmic-override={overrides.addressInput}
        className={classNames("__wab_instance", sty.addressInput)}
        placeholder={"enter your address"}
        type={"address"}
      />

      <TextInput
        data-plasmic-name={"contractInput"}
        data-plasmic-override={overrides.contractInput}
        className={classNames("__wab_instance", sty.contractInput)}
        placeholder={"enter the contract address"}
        type={"contract"}
      />

      <Button
        data-plasmic-name={"mintButton"}
        data-plasmic-override={overrides.mintButton}
        className={classNames("__wab_instance", sty.mintButton)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ynm7P
          )}
        >
          {"Mint"}
        </div>
      </Button>
    </div>
  );
}

const PlasmicDescendants = {
  root2: ["root2", "nftData", "addressInput", "contractInput", "mintButton"],
  nftData: ["nftData"],
  addressInput: ["addressInput"],
  contractInput: ["contractInput"],
  mintButton: ["mintButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNfTmint__ArgProps,
          internalVariantPropNames: PlasmicNfTmint__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicNfTmint__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root2") {
    func.displayName = "PlasmicNfTmint";
  } else {
    func.displayName = `PlasmicNfTmint.${nodeName}`;
  }
  return func;
}

export const PlasmicNfTmint = Object.assign(
  // Top-level PlasmicNfTmint renders the root element
  makeNodeComponent("root2"),
  {
    // Helper components rendering sub-elements
    nftData: makeNodeComponent("nftData"),
    addressInput: makeNodeComponent("addressInput"),
    contractInput: makeNodeComponent("contractInput"),
    mintButton: makeNodeComponent("mintButton"),
    // Metadata about props expected for PlasmicNfTmint
    internalVariantProps: PlasmicNfTmint__VariantProps,
    internalArgProps: PlasmicNfTmint__ArgProps
  }
);

export default PlasmicNfTmint;
/* prettier-ignore-end */
